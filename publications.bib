@inproceedings{sihler2024,
	author = {Sihler, Florian and Pietzschmann, Lukas and Straub, Raphael and Tichy, Matthias and Diera, Andor and Dahou, Abdelhalim},
	title = {On the Anatomy of Real-World R Code for Static Analysis},
	year = {2024},
	isbn = {9798400705878},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3643991.3644911},
	doi = {10.1145/3643991.3644911},
	abstract = {Context The R programming language has a huge and active community, especially in the area of statistical computing. Its interpreted nature allows for several interesting constructs, like the manipulation of functions at run-time, that hinder the static analysis of R programs. At the same time, there is a lack of existing research regarding how these features, or even the R language as a whole are used in practice. Objective In this paper, we conduct a large-scale, static analysis of more than 50 million lines of real-world R programs and packages to identify their characteristics and the features that are actually used. Moreover, we compare the similarities and differences between the scripts of R users and the implementations of package authors. We provide insights for static analysis tools like the lintr package as well as potential interpreter optimizations and uncover areas for future research. Method We analyze 4 230 R scripts submitted alongside publications and the sources of 19 450 CRAN packages for over 350 000 R files, collecting and summarizing quantitative information for features of interest. Results We find a high frequency of name-based indexing operations, assignments, and loops, but a low frequency for most of R's reflective functions. Furthermore, we find neither testing functions nor many calls to R's foreign function interface (FFI) in the publication submissions. Conclusion R scripts and package sources differ, for example, in their size, the way they include other packages, and their usage of R's reflective capabilities. We provide features that are used frequently and should be prioritized by static analysis tools, like operator assignments, function calls, and certain reflective functions like load.},
	booktitle = {Proceedings of the 21st International Conference on Mining Software Repositories},
	pages = {619â€“630},
	numpages = {12},
	keywords = {R programming language, large-scale static analysis, language feature usage},
	location = {Lisbon, Portugal},
	series = {MSR '24}
}


@article{schoffit2025,
	author = {Schoffit, Janek and Pietzschmann, Lukas and Prechtel, Paul and Eisermann, Dennis and Wendzel, Steffen and Kargl, Frank},
	editor = {Koldehofe, Boris and Klingler, Florian and Sommer, Christoph and Hummel, Karin Anna and Amthor, Peter},
	title = {Enhancing client security in zero trust architectures: A device-agent policy enforcement point for compartmentalized network management},
	journal = {Proceedings of the International Conference on Networked Systems 2025 (NetSys 2025): Technische Universit{\"a}t Ilmenau, 1 -- 4 September 2025},
	year = {2025},
	month = {Aug},
	day = {29},
	publisher = {ilmedia},
	address = {Ilmenau},
	pages = {29--32},
	keywords = {zero trust device agent; policy enforcement point; access control},
	abstract = {Zero Trust Architectures have recently attracted a lot of interest in the network community. However, access control is often not extending into client devices. In this paper, we propose an extension of Zero Trust Policy Enforcement Points that integrates a device agent to expand the zero trust security model to client devices. We have developed a generalized framework that integrates with multiple compartmentalization technologies, ensuring the isolation of processes and enforcement of network policies while maintaining application and user authentication. This approach minimizes the attack surface of malicious processes, as our Zero Trust Device Agent manages compartment lifecycles based on their behaviour within the network and integrates into the global access control framework, thereby improving the overall security of zero trust architectures.},
	doi = {10.22032/dbt.67112},
	url = {https://doi.org/10.22032/dbt.67112},
	series = {NetSys '25}
}

